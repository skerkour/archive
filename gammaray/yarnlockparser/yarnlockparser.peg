{
// yarn.lock parser
package yarnlockparser

import (
  "github.com/nearform/gammaray/nodepackage"
  log "github.com/sirupsen/logrus"
)


func ParseYarnLock(expression string, opts ...Option) ([]nodepackage.NodePackage, error) {
  got, err := ParseReader("yarn.lock", strings.NewReader(expression), opts...)
  if err != nil {
    log.Error("游놓 In :\n"+ expression + "<<EOF>>\n-->", err)
    return nil, err
  }
  log.Debug("游놓 In :\n"+ expression + "<<EOF>>\n-->", got)
  return got.([]nodepackage.NodePackage), err
}

func toIfaceSlice(v interface{}) []interface{} {
  if v == nil {
      return nil
  }
  return v.([]interface{})
}
}

Input = Header deps:Body EOF {
  return deps.([]nodepackage.NodePackage), nil
}

Header = CommentLine YarnLockfileVersionLine

Body = LCNM* deps:(Dependency*) {
  log.Debug("游놓 Body", deps)

  depsSl := toIfaceSlice(deps)
  var castedDeps []nodepackage.NodePackage
  for _, dep := range(depsSl) {
    castedDeps = append(castedDeps, dep.(nodepackage.NodePackage))
  }
  return castedDeps, nil
}

Dependency = (name:DependencyHeaderLine version:DependencyVersionLine DependencyResolvedLine (DependencyDependenciesHeaderLine DependencyDependency*)? (DependencyOptionalDependenciesHeaderLine DependencyOptionalDependency*)? LCNM*) {
  dep := nodepackage.NodePackage{Name: name.(string), Version: version.(string)}
  log.Debug("游놓 Package of DependencyHeaderLine: ", dep)
  return dep, nil
}

DependencyHeaderLine = (name:ListOfPackageQueryExpression Colon ROL) {
  log.Debug("游놓 Package of DependencyHeaderLine: ", name.(string))
  return name.(string), nil
}
DependencyVersionLine = (__ "version" _+ version:VersionExpression ROL) {
  log.Debug("游놓 Package of DependencyVersionLine: ", version.(string))
  return version.(string), nil
}
DependencyResolvedLine = __ "resolved" IgnoredRestOfLine
DependencyDependenciesHeaderLine = __ "dependencies" _* Colon ROL
DependencyDependency = ____ PackageNameExpression _+ VersionQueryExpression ROL
DependencyOptionalDependenciesHeaderLine = __ "optionalDependencies" _* Colon ROL
DependencyOptionalDependency = ____ PackageNameExpression _+ VersionQueryExpression ROL

ListOfPackageQueryExpression = name:PackageQueryExpression  (_* Comma _* PackageQueryExpression)* {
  log.Debug("游놓 Package of ListOfPackageQueryExpression: ", name.(string))
  return name.(string), nil
}
PackageQueryExpression = name:(QuotedPackageQuery / PackageQuery) {
  log.Debug("游놓 PackageQueryExpression: ", name.(string))
  return name.(string), nil
}

QuotedPackageQuery = (Quote name:PackageName Arobase NotQuote+ Quote) {
  log.Debug("游놓 QuotedPackageQuery: ", name.(string))
  return name.(string), nil
}
PackageQuery = (name:PackageName Arobase VersionQuery) {
  log.Debug("游놓 PackageQuery: ", name.(string))
  return name.(string), nil
}

PackageNameExpression = (Quote PackageName Quote / PackageName)
PackageName = (Scope Slash PackageChars) {
    log.Debug("游놓 Package with Scope: ", string(c.text))
    return string(c.text), nil
  } / PackageChars {
    log.Debug("游놓 Package: ", string(c.text))
    return string(c.text), nil
  }


VersionQueryExpression =  (Quote NotQuote+ Quote) / (NotColonCommentOrEOL)+
VersionExpression "a quoted version number" = (Quote version:Version Quote) {
  log.Debug("游놓 VersionExpression: ", version.(string))
  return version.(string), nil
}
Scope "a scope" = Arobase ScopeChars

LCNM "an empty or commented line" = NewLine/CommentLine/(_+ NewLine)

ROL = CommentLine / EmptyRestOfLine
CommentLine = _* Comment EOL
IgnoredRestOfLine = NotEOL? EOL
EmptyRestOfLine = _* EOL

YarnLockfileVersionLine = Hash _ "yarn lockfile v1" EOL
Comment = Hash NotEOL

PackageChars = UrlSafeCharNoDotNoUnderscore UrlSafeChar*
ScopeChars = UrlSafeCharNoDotNoUnderscore UrlSafeChar*

VersionQuery =  PathVersionQuery / SemverVersionQuery

UrlVersionQuery = ExtendedUrlSafeChar+
PathVersionQuery = PathOperator / PathSafeChar+
SemverVersionQuery = (Digit / Alpha / VersionQueryWildcard / VersionPunctuation / VersionQueryOperator / VersionQuerySeparator )+

NotQuote = [^"]
NotCommentOrEOL = [^:#\r\n]
NotColonCommentOrEOL = [^:#\r\n]
PathOperator = "/"
VersionQueryOperator = "^" / "~" / "<" / ">" / "=" / "!"
VersionQuerySeparator = "|" / _
VersionQueryWildcard = "x" / "X" / "*"

Version "a version number" = (Digit / Alpha / VersionPunctuation)+ {
  log.Debug("游놓 Version: ", string(c.text))
  return string(c.text), nil
}

VersionPunctuation = "." / "-" / "+"

Alpha = [a-zA-Z]
Digit = [0-9]

ExtendedUrlSafeChar = PathSafeChar / ":"
PathSafeCharNoArobase = UrlSafeChar / "+" / "/" / "%"
PathSafeChar = UrlSafeChar / "+" / "@" / "/" / "%"
UrlSafeCharNoDotNoUnderscore = Alpha / Digit / "-" / "~"
UrlSafeChar = Alpha / Digit / "-" / "." / "_" / "~"

Hash "a hash" = "#"
Quote "a double quote"= "\""
Comma "a comma" = ","
Colon "a colon" = ":"
Arobase "an arobase" = "@"
Slash "a slash" = "/"

NotEOL "any character but EOL/EOF" = [^\r\n]*
EOL "End of Line (EOL) or End of File (EOF)" = NewLine / EOF
NewLine = "\r\n" / "\n"

____ "double indent" = __ __
__ "single indent" = indent indent

indent = [ \t]

_ "a whitespace" = [ \t]

EOF = !.
